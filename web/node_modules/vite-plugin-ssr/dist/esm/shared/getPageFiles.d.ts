export type { AllPageFiles };
export type { PageFile };
export { getAllPageFiles_clientSide };
export { getAllPageFiles_serverSide };
export { findPageFile };
export { findDefaultFiles };
export { setPageFiles };
export { setPageFilesAsync };
export { isPageFilesSet };
declare function setPageFiles(pageFiles: unknown): void;
declare function isPageFilesSet(): boolean;
declare function setPageFilesAsync(_asyncSetter: () => Promise<unknown>): void;
declare type PageFile = {
    filePath: string;
    loadFile: () => Promise<Record<string, unknown>>;
};
declare const fileTypes: readonly [".page", ".page.server", ".page.route", ".page.client"];
declare type FileType = typeof fileTypes[number];
declare type AllPageFiles = Record<FileType, PageFile[]>;
declare type AllPageFiles_clientSide = Omit<AllPageFiles, '.page.server'>;
declare function getAllPageFiles_clientSide(): Promise<AllPageFiles_clientSide>;
declare function getAllPageFiles_serverSide(): Promise<AllPageFiles>;
declare function findPageFile<T>(pageFiles: {
    filePath: string;
    loadFile: T;
}[], pageId: string): {
    filePath: string;
    loadFile: T;
} | null;
declare function findDefaultFiles<T extends {
    filePath: string;
}>(pageFiles: T[]): T[];
//# sourceMappingURL=getPageFiles.d.ts.map