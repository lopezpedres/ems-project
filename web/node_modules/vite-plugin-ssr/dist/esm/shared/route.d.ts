import type { AllPageFiles } from './getPageFiles';
export { route };
export { loadPageRoutes };
export type { PageRoutes };
export { getAllPageIds };
export { getErrorPageId };
export { isErrorPage };
export { isStaticRoute };
declare type PageId = string;
declare function route(pageContext: {
    url: string;
    _allPageIds: string[];
    _allPageFiles: AllPageFiles;
    _pageRoutes: PageRoutes;
    _onBeforeRouteHook: null | OnBeforeRouteHook;
}): Promise<{
    _pageId: string | null;
    routeParams: Record<string, string>;
} & Record<string, unknown>>;
declare function getErrorPageId(allPageIds: string[]): string | null;
declare function isStaticRoute(route: string): boolean;
/**
  Returns the ID of all pages including `_error.page.*` but excluding `_default.page.*`.
*/
declare function getAllPageIds(allPageFiles: AllPageFiles): Promise<PageId[]>;
declare type RouteValue = string | Function;
declare type PageRoutes = {
    pageId: string;
    pageRouteFile?: {
        filePath: string;
        fileExports: PageRouteExports;
        routeValue: RouteValue;
    };
    filesystemRoute: string;
}[];
declare type OnBeforeRouteHook = {
    filePath: string;
    onBeforeRoute: (pageContext: {
        url: string;
    } & Record<string, unknown>) => unknown;
};
declare type PageRouteExports = {
    default: RouteValue;
    iKnowThePerformanceRisksOfAsyncRouteFunctions?: boolean;
} & Record<string, unknown>;
declare function loadPageRoutes(globalContext: {
    _allPageFiles: AllPageFiles;
    _allPageIds: string[];
}): Promise<{
    pageRoutes: PageRoutes;
    onBeforeRouteHook: null | OnBeforeRouteHook;
}>;
declare function isErrorPage(pageId: string): boolean;
//# sourceMappingURL=route.d.ts.map