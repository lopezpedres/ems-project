import { PageRoutes } from '../shared/route';
import { AllPageFiles } from '../shared/getPageFiles';
import { UrlParsed, PromiseType } from '../shared/utils';
import { StreamPipeNode, StreamPipeWeb, StreamReadableNode, StreamReadableWeb } from './html/stream';
export { renderPage };
export { prerenderPage };
export { renderStatic404Page };
export { getGlobalContext };
export { loadPageFiles };
export type { GlobalContext };
export { addComputedUrlProps };
export { loadOnBeforePrerenderHook };
declare type PageFilesData = PromiseType<ReturnType<typeof loadPageFiles>>;
declare type GlobalContext = PromiseType<ReturnType<typeof getGlobalContext>>;
declare function renderPage<T extends {
    url: string;
} & Record<string, unknown>>(pageContext: T): Promise<T & Record<string, unknown> & {
    httpResponse: HttpResponse;
}>;
declare type HttpResponse = null | {
    statusCode: 200 | 404 | 500;
    body: string;
    getBody: () => Promise<string>;
    bodyNodeStream: StreamReadableNode;
    bodyWebStream: StreamReadableWeb;
    bodyPipeToNodeWritable: StreamPipeNode;
    bodyPipeToWebWritable: StreamPipeWeb;
};
declare function prerenderPage(pageContext: {
    url: string;
    routeParams: Record<string, string>;
    _isPreRendering: true;
    _pageId: string;
    _usesClientRouter: boolean;
    _pageContextAlreadyProvidedByPrerenderHook?: true;
    _allPageFiles: AllPageFiles;
} & PageFilesData): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
} | {
    documentHtml: string;
    pageContextSerialized: string;
}>;
declare function renderStatic404Page(globalContext: GlobalContext & {
    _isPreRendering: true;
}): Promise<{
    documentHtml: string;
    pageContextSerialized: null;
} | {
    documentHtml: string;
    pageContextSerialized: string;
} | null>;
declare type PageServerFileProps = {
    filePath: string;
    fileExports: {
        render?: Function;
        prerender?: Function;
        onBeforeRender?: Function;
        doNotPrerender?: true;
        setPageProps: never;
        passToClient?: string[];
    };
};
declare function loadPageFiles(pageContext: {
    _pageId: string;
    _allPageFiles: AllPageFiles;
    _isPreRendering: boolean;
}): Promise<(({
    _pageServerFile: PageServerFileProps | null;
    _pageServerFileDefault: PageServerFileProps | null;
    _pageClientPath: string;
    Page: unknown;
    pageExports: Record<string, unknown>;
    _pageFilePath: string;
} | {
    _pageServerFile: PageServerFileProps | null;
    _pageServerFileDefault: PageServerFileProps | null;
    _pageClientPath: string;
    Page: null;
    pageExports: {};
    _pageFilePath: null;
}) & {
    _passToClient: string[];
}) & {
    _pageAssets: {
        src: string;
        assetType: "script" | "style" | "preload";
        mediaType: "text/javascript" | "text/css" | "image/jpeg" | "image/png" | "image/gif" | "image/svg+xml" | "font/ttf" | "font/woff" | "font/woff2" | null;
        preloadType: "image" | "script" | "font" | "style" | null;
    }[];
}>;
declare type OnBeforePrerenderHook = (globalContext: {
    _pageRoutes: PageRoutes;
}) => unknown;
declare function loadOnBeforePrerenderHook(globalContext: {
    _allPageFiles: AllPageFiles;
}): Promise<null | {
    onBeforePrerenderHook: OnBeforePrerenderHook;
    hookFilePath: string;
}>;
declare type PageContextUrls = {
    urlNormalized: string;
    urlPathname: string;
    urlParsed: UrlParsed;
};
declare function addComputedUrlProps<PageContext extends Record<string, unknown> & {
    url: string;
}>(pageContext: PageContext): asserts pageContext is PageContext & PageContextUrls;
declare function getGlobalContext(): Promise<{
    _allPageFiles: AllPageFiles;
} & {
    _allPageIds: string[];
} & {
    _pageRoutes: PageRoutes;
    _onBeforeRouteHook: {
        filePath: string;
        onBeforeRoute: (pageContext: {
            url: string;
        } & Record<string, unknown>) => unknown;
    } | null;
}>;
//# sourceMappingURL=renderPage.d.ts.map