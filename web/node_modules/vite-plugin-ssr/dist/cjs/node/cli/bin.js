"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cac_1 = require("cac");
const path_1 = require("path");
const prerender_1 = require("../prerender");
const utils_1 = require("../../shared/utils");
const cli = (0, cac_1.cac)(utils_1.projectInfo.name);
cli
    .command('prerender')
    .option('--partial', 'allow only a subset of pages to be pre-rendered')
    .option('--no-extra-dir', 'Do not create a new directory for each page, e.g. generate `dist/client/about.html` instead of `dist/client/about/index.html`')
    .option('--root <path>', '[string] root directory of your project (where `vite.config.js` and `dist/` live) (default: `process.cwd()`)')
    .option('--client-router', 'serialize `pageContext` to JSON files for Client Routing')
    .option('--base <path>', '[string] public base path (default: /)')
    .option('--parallel <numberOfJobs>', '[number] Number of jobs running in parallel. Default: `os.cpus().length`. Set to `1` to disable concurrency.')
    .action(async (options) => {
    const { partial, extraDir, clientRouter, base, parallel } = options;
    const root = options.root && (0, path_1.resolve)(options.root);
    const noExtraDir = !extraDir;
    await (0, prerender_1.prerender)({ partial, noExtraDir, clientRouter, base, root, parallel });
});
// Listen to unknown commands
cli.on('command:*', () => {
    console.error('Invalid command: %s', cli.args.join(' '));
});
cli.help();
cli.version(utils_1.projectInfo.version);
cli.parse(process.argv.length === 2 ? [...process.argv, '--help'] : process.argv);
process.on('unhandledRejection', (rejectValue) => {
    throw rejectValue;
});
//# sourceMappingURL=bin.js.map