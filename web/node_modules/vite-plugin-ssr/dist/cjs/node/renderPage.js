"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadOnBeforePrerenderHook = exports.addComputedUrlProps = exports.loadPageFiles = exports.getGlobalContext = exports.renderStatic404Page = exports.prerenderPage = exports.renderPage = void 0;
const route_1 = require("../shared/route");
const escapeInject_1 = require("./html/escapeInject");
const getPageFiles_1 = require("../shared/getPageFiles");
const ssrEnv_1 = require("./ssrEnv");
const path_1 = require("path");
const json_s_1 = require("@brillout/json-s");
const utils_1 = require("../shared/utils");
const baseUrlHandling_1 = require("./baseUrlHandling");
const injectAssets_1 = require("./html/injectAssets");
const loadPageView_1 = require("../shared/loadPageView");
const sortPageContext_1 = require("../shared/sortPageContext");
const stream_1 = require("./html/stream");
async function renderPage(pageContext) {
    /* Not very useful because of HTTP response `{ pageContext404PageDoesNotExist: true }` with status code `200`
    : Promise<T & Record<string, unknown> & (({ httpResponse: null}) | ({httpResponse: { statusCode: 500, body: string}}) | (PageContextBuiltIn & { statusCode: 404 | 500; body: string }))>
    */
    assertArguments(...arguments);
    if (pageContext.url.endsWith('/favicon.ico')) {
        (0, utils_1.objectAssign)(pageContext, { httpResponse: null });
        return pageContext;
    }
    const { isPageContextRequest, hasBaseUrl } = analyzeUrl(pageContext.url);
    if (!hasBaseUrl) {
        (0, utils_1.objectAssign)(pageContext, { httpResponse: null });
        return pageContext;
    }
    (0, utils_1.objectAssign)(pageContext, {
        _isPageContextRequest: isPageContextRequest
    });
    addComputedUrlProps(pageContext);
    const globalContext = await getGlobalContext();
    (0, utils_1.objectAssign)(globalContext, { _isPreRendering: false });
    (0, utils_1.objectAssign)(pageContext, globalContext);
    // *** Route ***
    // We use a try-catch because `route()` executes `.page.route.js` source code which is
    // written by the user and may contain errors.
    let pageContextRouteAddendum;
    try {
        // We use a try-catch because we execute user-defined `*.page.*` files which may contain an error.
        pageContextRouteAddendum = await (0, route_1.route)(pageContext);
    }
    catch (err) {
        (0, utils_1.objectAssign)(pageContext, { _err: err });
        const httpResponse = await handleRenderError(pageContext);
        (0, utils_1.objectAssign)(pageContext, { httpResponse });
        return pageContext;
    }
    // *** Handle 404 ***
    let statusCode;
    if (pageContextRouteAddendum._pageId === null) {
        if (!pageContext._isPageContextRequest) {
            warn404(pageContext);
        }
        const errorPageId = (0, route_1.getErrorPageId)(pageContext._allPageIds);
        if (!errorPageId) {
            warnMissingErrorPage();
            if (pageContext._isPageContextRequest) {
                const httpResponse = createHttpResponseObject((0, json_s_1.stringify)({
                    pageContext404PageDoesNotExist: true
                }), {
                    statusCode: 200,
                    renderFilePath: null
                });
                (0, utils_1.objectAssign)(pageContext, { httpResponse });
                return pageContext;
            }
            else {
                const httpResponse = null;
                (0, utils_1.objectAssign)(pageContext, { httpResponse });
                return pageContext;
            }
        }
        if (!pageContext._isPageContextRequest) {
            statusCode = 404;
        }
        else {
            statusCode = 200;
        }
        pageContextRouteAddendum = { _pageId: errorPageId, is404: true, routeParams: {} };
    }
    else {
        statusCode = 200;
    }
    (0, utils_1.assert)((0, utils_1.hasProp)(pageContextRouteAddendum, '_pageId', 'string'));
    (0, utils_1.assert)((0, utils_1.isPlainObject)(pageContextRouteAddendum.routeParams));
    (0, utils_1.objectAssign)(pageContext, pageContextRouteAddendum);
    const pageFilesData = await loadPageFiles(pageContext);
    (0, utils_1.objectAssign)(pageContext, pageFilesData);
    try {
        // We use a try-catch because we execute user-defined `*.page.*` files which may contain an error.
        await executeAddPageContextHook(pageContext);
        executeAddPageContextHook_addTypes(pageContext);
    }
    catch (err) {
        (0, utils_1.objectAssign)(pageContext, { _err: err });
        const httpResponse = await handleRenderError(pageContext);
        (0, utils_1.objectAssign)(pageContext, { httpResponse });
        return pageContext;
    }
    if (pageContext._isPageContextRequest) {
        const pageContextSerialized = serializeClientPageContext(pageContext);
        const httpResponse = createHttpResponseObject(pageContextSerialized, { statusCode: 200, renderFilePath: null });
        (0, utils_1.objectAssign)(pageContext, { httpResponse });
        return pageContext;
    }
    let renderHookResult;
    try {
        // We use a try-catch because we execute user-defined `*.page.*` files which may contain an error.
        renderHookResult = await executeRenderHook(pageContext);
    }
    catch (err) {
        (0, utils_1.objectAssign)(pageContext, { _err: err });
        const httpResponse = await handleRenderError(pageContext);
        (0, utils_1.objectAssign)(pageContext, { httpResponse });
        return pageContext;
    }
    if (renderHookResult === null) {
        (0, utils_1.objectAssign)(pageContext, { httpResponse: null });
        return pageContext;
    }
    else {
        const { escapeResult, renderFilePath } = renderHookResult;
        const httpResponse = createHttpResponseObject(escapeResult, { statusCode, renderFilePath });
        (0, utils_1.objectAssign)(pageContext, { httpResponse });
        return pageContext;
    }
}
exports.renderPage = renderPage;
async function handleRenderError(pageContext) {
    handleError(pageContext._err);
    if (pageContext._isPageContextRequest) {
        const { body, statusCode } = renderPageContextError(pageContext._err);
        const httpResponse = createHttpResponseObject(body, { statusCode, renderFilePath: null });
        return httpResponse;
    }
    const errorPageId = (0, route_1.getErrorPageId)(pageContext._allPageIds);
    if (errorPageId === null) {
        warnMissingErrorPage();
        return null;
    }
    (0, utils_1.objectAssign)(pageContext, {
        is404: false,
        _pageId: errorPageId,
        _isPageContextRequest: false,
        routeParams: {}
    });
    const pageFilesData = await loadPageFiles(pageContext);
    (0, utils_1.objectAssign)(pageContext, pageFilesData);
    if (!pageContext._pageContextClient) {
        try {
            // We use a try-catch because we execute user-defined `*.page.*` files which may contain an error.
            await executeAddPageContextHook(pageContext);
            executeAddPageContextHook_addTypes(pageContext);
        }
        catch (err) {
            // We purposely swallow the error, because another error was already shown to the user in `handleError()`.
            // (And chances are high that this is the same error.)
            return null;
        }
    }
    (0, utils_1.assert)((0, utils_1.hasProp)(pageContext, '_pageContextClient', 'object'));
    let renderHookResult;
    try {
        // We use a try-catch because we execute user-defined `*.page.*` files which may contain an error.
        renderHookResult = await executeRenderHook(pageContext);
    }
    catch (err) {
        // We purposely swallow the error, because another error was already shown to the user in `handleError()`.
        // (And chances are high that this is the same error.)
        return null;
    }
    const { escapeResult, renderFilePath } = renderHookResult;
    const httpResponse = createHttpResponseObject(escapeResult, { statusCode: 500, renderFilePath });
    return httpResponse;
}
function createHttpResponseObject(escapeResult, { statusCode, renderFilePath }) {
    if (escapeResult === null) {
        return null;
    }
    return {
        statusCode,
        get body() {
            if (typeof escapeResult !== 'string') {
                (0, utils_1.assert)(renderFilePath);
                (0, utils_1.assertUsage)(false, '`pageContext.httpResponse.body` is not available because your `render()` hook (' +
                    renderFilePath +
                    ') provides an HTML stream. Use `const body = await pageContext.httpResponse.getBody()` instead, see https://vite-plugin-ssr.com/html-streaming');
            }
            const body = escapeResult;
            return body;
        },
        async getBody() {
            const body = await (0, escapeInject_1.getHtmlString)(escapeResult);
            return body;
        },
        get bodyNodeStream() {
            (0, utils_1.assert)(escapeResult !== null);
            const nodeStream = (0, stream_1.getNodeStream)(escapeResult);
            (0, utils_1.assertUsage)(nodeStream !== null, '`pageContext.httpResponse.bodyNodeStream` is not available: make sure your `render()` hook provides a Node.js Stream, see https://vite-plugin-ssr.com/html-streaming');
            return nodeStream;
        },
        get bodyWebStream() {
            (0, utils_1.assert)(escapeResult !== null);
            const webStream = (0, stream_1.getWebStream)(escapeResult);
            (0, utils_1.assertUsage)(webStream !== null, '`pageContext.httpResponse.bodyWebStream` is not available: make sure your `render()` hook provides a Web Stream, see https://vite-plugin-ssr.com/html-streaming');
            return webStream;
        },
        bodyPipeToWebWritable(writable) {
            const success = (0, stream_1.pipeToStreamWritableWeb)(escapeResult, writable);
            (0, utils_1.assertUsage)(success, '`pageContext.httpResponse.pipeToWebWritable` is not available: make sure your `render()` hook provides a Web Stream Pipe, see https://vite-plugin-ssr.com/html-streaming');
        },
        bodyPipeToNodeWritable(writable) {
            const success = (0, stream_1.pipeToStreamWritableNode)(escapeResult, writable);
            (0, utils_1.assertUsage)(success, '`pageContext.httpResponse.pipeToNodeWritable` is not available: make sure your `render()` hook provides a Node.js Stream Pipe, see https://vite-plugin-ssr.com/html-streaming');
        }
    };
}
async function prerenderPage(pageContext) {
    (0, utils_1.assert)(pageContext._isPreRendering === true);
    addComputedUrlProps(pageContext);
    await executeAddPageContextHook(pageContext);
    executeAddPageContextHook_addTypes(pageContext);
    const renderHookResult = await executeRenderHook(pageContext);
    (0, utils_1.assertUsage)(renderHookResult.escapeResult !== null, "Pre-rendering requires your `render()` hook to provide HTML. Open a GitHub issue if that's a problem for you.");
    (0, utils_1.assert)(!('_isPageContextRequest' in pageContext));
    const documentHtml = await (0, escapeInject_1.getHtmlString)(renderHookResult.escapeResult);
    (0, utils_1.assert)(typeof documentHtml === 'string');
    if (!pageContext._usesClientRouter) {
        return { documentHtml, pageContextSerialized: null };
    }
    else {
        const pageContextSerialized = serializeClientPageContext(pageContext);
        return { documentHtml, pageContextSerialized };
    }
}
exports.prerenderPage = prerenderPage;
async function renderStatic404Page(globalContext) {
    const errorPageId = (0, route_1.getErrorPageId)(globalContext._allPageIds);
    if (!errorPageId) {
        return null;
    }
    const pageContext = Object.assign(Object.assign({}, globalContext), { _pageId: errorPageId, is404: true, routeParams: {}, url: '/fake-404-url', 
        // `renderStatic404Page()` is about generating `dist/client/404.html` for static hosts; there is no Client Routing.
        _usesClientRouter: false });
    const pageFilesData = await loadPageFiles(pageContext);
    (0, utils_1.objectAssign)(pageContext, pageFilesData);
    return prerenderPage(pageContext);
}
exports.renderStatic404Page = renderStatic404Page;
function getDefaultPassToClientProps(pageContext) {
    const passToClient = [];
    if ((0, route_1.isErrorPage)(pageContext._pageId)) {
        (0, utils_1.assert)((0, utils_1.hasProp)(pageContext, 'is404', 'boolean'));
        const pageProps = pageContext.pageProps || {};
        pageProps['is404'] = pageProps['is404'] || pageContext.is404;
        pageContext.pageProps = pageProps;
        passToClient.push(...['pageProps', 'is404']);
    }
    return passToClient;
}
function serializeClientPageContext(pageContext) {
    const pageContextClient = pageContext._pageContextClient;
    (0, utils_1.assert)((0, utils_1.isPlainObject)(pageContextClient));
    const pageContextSerialized = (0, json_s_1.stringify)({
        pageContext: pageContextClient
    });
    return pageContextSerialized;
}
function preparePageContextNode(pageContext) {
    (0, utils_1.assert)(typeof pageContext.url === 'string');
    (0, utils_1.assert)(typeof pageContext.urlNormalized === 'string');
    (0, utils_1.assert)(typeof pageContext.urlPathname === 'string');
    (0, utils_1.assert)((0, utils_1.isPlainObject)(pageContext.urlParsed));
    (0, utils_1.assert)((0, utils_1.isPlainObject)(pageContext.routeParams));
    (0, utils_1.assert)('Page' in pageContext);
    (0, utils_1.assert)((0, utils_1.isObject)(pageContext.pageExports));
    (0, sortPageContext_1.sortPageContext)(pageContext);
}
/*/
type PageServerFiles = {
  pageServerFile: PageServerFile | null
  pageServerFileDefault: PageServerFile | null
}
//*/
function assert_pageServerFile(pageServerFile) {
    if (pageServerFile === null)
        return;
    const { filePath, fileExports } = pageServerFile;
    (0, utils_1.assert)(filePath);
    (0, utils_1.assert)(fileExports);
    const render = fileExports['render'];
    (0, utils_1.assertUsage)(!render || (0, utils_1.isCallable)(render), `The \`render()\` hook defined in ${filePath} should be a function.`);
    (0, utils_1.assertUsage)(!('onBeforeRender' in fileExports) || (0, utils_1.isCallable)(fileExports['onBeforeRender']), `The \`onBeforeRender()\` hook defined in ${filePath} should be a function.`);
    (0, utils_1.assertUsage)(!('passToClient' in fileExports) || (0, utils_1.hasProp)(fileExports, 'passToClient', 'string[]'), `The \`passToClient_\` export defined in ${filePath} should be an array of strings.`);
    const prerender = fileExports['prerender'];
    (0, utils_1.assertUsage)(!prerender || (0, utils_1.isCallable)(prerender), `The \`prerender()\` hook defined in ${filePath} should be a function.`);
}
async function loadPageFiles(pageContext) {
    const pageView = await (0, loadPageView_1.loadPageView)(pageContext);
    const pageClientPath = getPageClientPath(pageContext);
    const { pageServerFile, pageServerFileDefault } = await loadPageServerFiles(pageContext);
    const pageFilesData = Object.assign(Object.assign({}, pageView), { _pageServerFile: pageServerFile, _pageServerFileDefault: pageServerFileDefault, _pageClientPath: pageClientPath });
    const passToClient = [
        ...getDefaultPassToClientProps(pageContext),
        ...((pageServerFile === null || pageServerFile === void 0 ? void 0 : pageServerFile.fileExports.passToClient) || (pageServerFileDefault === null || pageServerFileDefault === void 0 ? void 0 : pageServerFileDefault.fileExports.passToClient) || [])
    ];
    (0, utils_1.objectAssign)(pageFilesData, {
        _passToClient: passToClient
    });
    const isPreRendering = pageContext._isPreRendering;
    (0, utils_1.assert)([true, false].includes(isPreRendering));
    const dependencies = [pageView._pageFilePath, pageClientPath].filter((p) => p !== null);
    const pageAssets = await (0, injectAssets_1.getPageAssets)(pageContext, dependencies, pageClientPath, isPreRendering);
    (0, utils_1.objectAssign)(pageFilesData, {
        _pageAssets: pageAssets
    });
    return pageFilesData;
}
exports.loadPageFiles = loadPageFiles;
function getPageClientPath(pageContext) {
    var _a, _b;
    const { _pageId: pageId, _allPageFiles: allPageFiles } = pageContext;
    const pageClientFiles = allPageFiles['.page.client'];
    (0, utils_1.assertUsage)(pageClientFiles.length > 0, 'No `*.page.client.js` file found. Make sure to create one. You can create a `_default.page.client.js` which will apply as default to all your pages.');
    const pageClientPath = ((_a = (0, getPageFiles_1.findPageFile)(pageClientFiles, pageId)) === null || _a === void 0 ? void 0 : _a.filePath) || ((_b = findDefaultFile(pageClientFiles, pageId)) === null || _b === void 0 ? void 0 : _b.filePath);
    (0, utils_1.assert)(pageClientPath);
    return pageClientPath;
}
async function loadPageServerFiles(pageContext) {
    const pageId = pageContext._pageId;
    let serverFiles = pageContext._allPageFiles['.page.server'];
    (0, utils_1.assertUsage)(serverFiles.length > 0, 'No `*.page.server.js` file found. Make sure to create one. You can create a `_default.page.server.js` which will apply as default to all your pages.');
    const serverFile = (0, getPageFiles_1.findPageFile)(serverFiles, pageId);
    const serverFileDefault = findDefaultFile(serverFiles, pageId);
    (0, utils_1.assert)(serverFile || serverFileDefault);
    const pageServerFile = !serverFile
        ? null
        : {
            filePath: serverFile.filePath,
            fileExports: await serverFile.loadFile()
        };
    if (pageServerFile) {
        assertExportsOfServerPage(pageServerFile.fileExports, pageServerFile.filePath);
    }
    const pageServerFileDefault = !serverFileDefault
        ? null
        : {
            filePath: serverFileDefault.filePath,
            fileExports: await serverFileDefault.loadFile()
        };
    if (pageServerFileDefault) {
        assertExportsOfServerPage(pageServerFileDefault.fileExports, pageServerFileDefault.filePath);
    }
    if (pageServerFile !== null) {
        assert_pageServerFile(pageServerFile);
    }
    if (pageServerFileDefault !== null) {
        assert_pageServerFile(pageServerFileDefault);
    }
    if (pageServerFile !== null) {
        return { pageServerFile, pageServerFileDefault };
    }
    if (pageServerFileDefault !== null) {
        return { pageServerFile, pageServerFileDefault };
    }
    (0, utils_1.assert)(false);
}
async function loadOnBeforePrerenderHook(globalContext) {
    const defautFiles = (0, getPageFiles_1.findDefaultFiles)(globalContext._allPageFiles['.page.server']);
    let onBeforePrerenderHook = null;
    let hookFilePath = undefined;
    await Promise.all(defautFiles.map(async ({ filePath, loadFile }) => {
        const fileExports = await loadFile();
        assertExportsOfServerPage(fileExports, filePath);
        if ('onBeforePrerender' in fileExports) {
            (0, utils_1.assertUsage)((0, utils_1.hasProp)(fileExports, 'onBeforePrerender', 'function'), `The \`export { onBeforePrerender }\` in ${filePath} should be a function.`);
            (0, utils_1.assertUsage)(onBeforePrerenderHook === null, 'There can be only one `onBeforePrerender()` hook. If you need to be able to define several, open a new GitHub issue.');
            onBeforePrerenderHook = fileExports.onBeforePrerender;
            hookFilePath = filePath;
        }
    }));
    if (!onBeforePrerenderHook) {
        return null;
    }
    (0, utils_1.assert)(hookFilePath);
    return { onBeforePrerenderHook, hookFilePath };
}
exports.loadOnBeforePrerenderHook = loadOnBeforePrerenderHook;
function assertExportsOfServerPage(fileExports, filePath) {
    (0, utils_1.assertExports)(fileExports, filePath, ['render', 'onBeforeRender', 'passToClient', 'prerender', 'doNotPrerender', 'onBeforePrerender'], {
        ['_onBeforePrerender']: 'onBeforePrerender'
    }, {
        ['addPageContext']: 'onBeforeRender'
    });
}
async function executeAddPageContextHook(pageContext) {
    var _a, _b, _c, _d;
    const onBeforeRender = ((_a = pageContext._pageServerFile) === null || _a === void 0 ? void 0 : _a.fileExports.onBeforeRender) ||
        ((_b = pageContext._pageServerFileDefault) === null || _b === void 0 ? void 0 : _b.fileExports.onBeforeRender);
    if (!pageContext._pageContextAlreadyProvidedByPrerenderHook && onBeforeRender) {
        const filePath = ((_c = pageContext._pageServerFile) === null || _c === void 0 ? void 0 : _c.filePath) || ((_d = pageContext._pageServerFileDefault) === null || _d === void 0 ? void 0 : _d.filePath);
        (0, utils_1.assert)(filePath);
        preparePageContextNode(pageContext);
        const result = await onBeforeRender(pageContext);
        assertHookResult(result, 'onBeforeRender', ['pageContext'], filePath);
        Object.assign(pageContext, result === null || result === void 0 ? void 0 : result.pageContext);
    }
    const pageContextClient = { _pageId: pageContext._pageId };
    pageContext._passToClient.forEach((prop) => {
        pageContextClient[prop] = pageContext[prop];
    });
    pageContext['_pageContextClient'] = pageContextClient;
}
function executeAddPageContextHook_addTypes(pageContext) {
    pageContext; // make TS happy
}
async function executeRenderHook(pageContext) {
    (0, utils_1.assert)(pageContext._pageServerFile || pageContext._pageServerFileDefault);
    let render;
    let renderFilePath;
    const pageServerFile = pageContext._pageServerFile;
    const pageRenderFunction = pageServerFile === null || pageServerFile === void 0 ? void 0 : pageServerFile.fileExports.render;
    if (pageServerFile && pageRenderFunction) {
        render = pageRenderFunction;
        renderFilePath = pageServerFile.filePath;
    }
    else {
        const pageServerFileDefault = pageContext._pageServerFileDefault;
        const pageDefaultRenderFunction = pageServerFileDefault === null || pageServerFileDefault === void 0 ? void 0 : pageServerFileDefault.fileExports.render;
        if (pageServerFileDefault && pageDefaultRenderFunction) {
            render = pageDefaultRenderFunction;
            renderFilePath = pageServerFileDefault.filePath;
        }
    }
    (0, utils_1.assertUsage)(render, 'No `render()` hook found. Make sure to define a `*.page.server.js` file with `export function render() { /*...*/ }`. You can also `export { render }` in `_default.page.server.js` which will be the default `render()` hook of all your pages.');
    (0, utils_1.assert)(renderFilePath);
    preparePageContextNode(pageContext);
    const result = await render(pageContext);
    if ((0, utils_1.isObject)(result) && !(0, escapeInject_1.isEscapeInject)(result)) {
        assertHookResult(result, 'render', ['documentHtml', 'pageContext'], renderFilePath);
    }
    if ((0, utils_1.hasProp)(result, 'pageContext')) {
        Object.assign(pageContext, result.pageContext);
    }
    const errPrefix = 'The `render()` hook exported by ' + renderFilePath;
    const errSuffix = [
        "a string generated with the `escapeInject` template tag or a string returned by `dangerouslySkipEscape('<p>Some HTML</p>')`",
        ', see https://vite-plugin-ssr.com/escapeInject'
    ].join(' ');
    let documentHtml;
    if (!(0, utils_1.isObject)(result) || (0, escapeInject_1.isEscapeInject)(result)) {
        (0, utils_1.assertUsage)(typeof result !== 'string', [
            errPrefix,
            'returned a plain JavaScript string which is forbidden;',
            'instead, it should return',
            errSuffix
        ].join(' '));
        (0, utils_1.assertUsage)(result === null || (0, escapeInject_1.isEscapeInject)(result), [
            errPrefix,
            'should return `null`, a string `documentHtml`, or an object `{ documentHtml, pageContext }`',
            'where `pageContext` is `undefined` or an object holding additional `pageContext` values',
            'and `documentHtml` is',
            errSuffix
        ].join(' '));
        documentHtml = result;
    }
    else {
        assertKeys(result, ['documentHtml', 'pageContext'], errPrefix);
        if ('documentHtml' in result) {
            documentHtml = result.documentHtml;
            (0, utils_1.assertUsage)(typeof documentHtml !== 'string', [
                errPrefix,
                'returned `{ documentHtml }`, but `documentHtml` is a plain JavaScript string which is forbidden;',
                '`documentHtml` should be',
                errSuffix
            ].join(' '));
            (0, utils_1.assertUsage)(documentHtml === undefined || documentHtml === null || (0, escapeInject_1.isEscapeInject)(documentHtml), [errPrefix, 'returned `{ documentHtml }`, but `documentHtml` should be', errSuffix].join(' '));
        }
    }
    (0, utils_1.assert)(documentHtml === undefined || documentHtml === null || (0, escapeInject_1.isEscapeInject)(documentHtml));
    if (documentHtml === null || documentHtml === undefined) {
        return { escapeResult: null, renderFilePath };
    }
    const escapeResult = await (0, escapeInject_1.renderEscapeInject)(documentHtml, pageContext, renderFilePath);
    return { escapeResult, renderFilePath };
}
function assertHookResult(hookResult, hookName, hookResultKeys, hookFile) {
    const errPrefix = `The \`${hookName}()\` hook exported by ${hookFile}`;
    (0, utils_1.assertUsage)(hookResult === null || hookResult === undefined || (0, utils_1.isPlainObject)(hookResult), `${errPrefix} should return \`null\`, \`undefined\`, or a plain JavaScript object.`);
    if (hookResult === undefined || hookResult === null) {
        return;
    }
    assertKeys(hookResult, hookResultKeys, errPrefix);
}
function assertKeys(obj, keysExpected, errPrefix) {
    const keysUnknown = [];
    const keys = Object.keys(obj);
    for (const key of keys) {
        if (!keysExpected.includes(key)) {
            keysUnknown.push(key);
        }
    }
    (0, utils_1.assertUsage)(keysUnknown.length === 0, [
        errPrefix,
        'returned an object with unknown keys',
        (0, utils_1.stringifyStringArray)(keysUnknown) + '.',
        'Only following keys are allowed:',
        (0, utils_1.stringifyStringArray)(keysExpected) + '.'
    ].join(' '));
}
function findDefaultFile(pageFiles, pageId) {
    const defautFiles = (0, getPageFiles_1.findDefaultFiles)(pageFiles);
    // Sort `_default.page.server.js` files by filesystem proximity to pageId's `*.page.js` file
    defautFiles.sort((0, utils_1.lowerFirst)(({ filePath }) => {
        if (filePath.startsWith(pageId))
            return -1;
        (0, utils_1.assert)(!filePath.includes('\\'));
        (0, utils_1.assert)(!pageId.includes('\\'));
        const relativePath = path_1.posix.relative(pageId, filePath);
        (0, utils_1.assert)(!relativePath.includes('\\'));
        const changeDirCount = relativePath.split('/').length;
        return changeDirCount;
    }));
    return defautFiles[0] || null;
}
function assertArguments(...args) {
    const pageContext = args[0];
    (0, utils_1.assertUsage)(pageContext, '`renderPage(pageContext)`: argument `pageContext` is missing.');
    (0, utils_1.assertUsage)((0, utils_1.isPlainObject)(pageContext), `\`renderPage(pageContext)\`: argument \`pageContext\` should be a plain JavaScript object, but you passed a \`pageContext\` with \`pageContext.constructor === ${pageContext.constructor}\`.`);
    (0, utils_1.assertUsage)((0, utils_1.hasProp)(pageContext, 'url'), '`renderPage(pageContext)`: The `pageContext` you passed is missing the property `pageContext.url`.');
    (0, utils_1.assertUsage)(typeof pageContext.url === 'string', '`renderPage(pageContext)`: `pageContext.url` should be a string but `typeof pageContext.url === "' +
        typeof pageContext.url +
        '"`.');
    (0, utils_1.assertUsage)(pageContext.url.startsWith('/') || pageContext.url.startsWith('http'), '`renderPage(pageContext)`: `pageContext.url` should start with `/` (e.g. `/product/42`) or `http` (e.g. `http://example.org/product/42`) but `pageContext.url === "' +
        pageContext.url +
        '"`.');
    try {
        const { url } = pageContext;
        const urlWithOrigin = url.startsWith('http') ? url : 'http://fake-origin.example.org' + url;
        // `new URL()` conveniently throws if URL is not an URL
        new URL(urlWithOrigin);
    }
    catch (err) {
        (0, utils_1.assertUsage)(false, '`renderPage(pageContext)`: `pageContext.url` should be a URL but `pageContext.url==="' + pageContext.url + '"`.');
    }
    const len = args.length;
    (0, utils_1.assertUsage)(len === 1, `\`renderPage(pageContext)\`: You passed ${len} arguments but \`renderPage()\` accepts only one argument.'`);
}
function warnMissingErrorPage() {
    const { isProduction } = (0, ssrEnv_1.getSsrEnv)();
    if (!isProduction) {
        (0, utils_1.assertWarning)(false, 'No `_error.page.js` found. We recommend creating a `_error.page.js` file. (This warning is not shown in production.)');
    }
}
function warn404(pageContext) {
    const { isProduction } = (0, ssrEnv_1.getSsrEnv)();
    const pageRoutes = pageContext._pageRoutes;
    (0, utils_1.assertUsage)(pageRoutes.length > 0, 'No page found. Create a file that ends with the suffix `.page.js` (or `.page.vue`, `.page.jsx`, ...).');
    const { urlPathname } = pageContext;
    if (!isProduction && !isFileRequest(urlPathname)) {
        (0, utils_1.assertWarning)(false, [
            `URL \`${urlPathname}\` is not matching any of your ${pageRoutes.length} page routes (this warning is not shown in production):`,
            ...getPagesAndRoutesInfo(pageRoutes)
        ].join('\n'));
    }
}
function getPagesAndRoutesInfo(pageRoutes) {
    return pageRoutes
        .map((pageRoute) => {
        const { pageId, filesystemRoute, pageRouteFile } = pageRoute;
        let route;
        let routeType;
        if (pageRouteFile) {
            const { routeValue } = pageRouteFile;
            route =
                typeof routeValue === 'string'
                    ? routeValue
                    : truncateString(String(routeValue).split(/\s/).filter(Boolean).join(' '), 64);
            routeType = typeof routeValue === 'string' ? 'Route String' : 'Route Function';
        }
        else {
            route = filesystemRoute;
            routeType = 'Filesystem Route';
        }
        return `\`${route}\` (${routeType} of \`${pageId}.page.*\`)`;
    })
        .sort(utils_1.compareString)
        .map((line, i) => {
        const nth = (i + 1).toString().padStart(pageRoutes.length.toString().length, '0');
        return ` (${nth}) ${line}`;
    });
}
function truncateString(str, len) {
    if (len > str.length) {
        return str;
    }
    else {
        str = str.substring(0, len);
        return str + '...';
    }
}
function isFileRequest(urlPathname) {
    (0, utils_1.assert)(urlPathname.startsWith('/'));
    const paths = urlPathname.split('/');
    const lastPath = paths[paths.length - 1];
    (0, utils_1.assert)(typeof lastPath === 'string');
    const parts = lastPath.split('.');
    if (parts.length < 2) {
        return false;
    }
    const fileExtension = parts[parts.length - 1];
    (0, utils_1.assert)(typeof fileExtension === 'string');
    return /^[a-z0-9]+$/.test(fileExtension);
}
function renderPageContextError(err) {
    if (err) {
        handleError(err);
    }
    const httpResponse = {
        body: (0, json_s_1.stringify)({
            userError: true
        }),
        statusCode: 500
    };
    return httpResponse;
}
function handleError(err) {
    const { viteDevServer } = (0, ssrEnv_1.getSsrEnv)();
    if (viteDevServer) {
        (0, utils_1.cast)(err);
        if (err === null || err === void 0 ? void 0 : err.stack) {
            viteDevServer.ssrFixStacktrace(err);
        }
    }
    // We ensure we print a string; Cloudflare Workers doesn't seem to properly stringify `Error` objects.
    const errStr = ((0, utils_1.hasProp)(err, 'stack') && String(err.stack)) || String(err);
    console.error(errStr);
}
function analyzeUrl(url) {
    (0, utils_1.assert)(url.startsWith('/') || url.startsWith('http'));
    const { urlWithoutPageContextRequestSuffix, isPageContextRequest } = (0, utils_1.handlePageContextRequestSuffix)(url);
    url = urlWithoutPageContextRequestSuffix;
    const { urlWithoutBaseUrl, hasBaseUrl } = (0, baseUrlHandling_1.analyzeBaseUrl)(url);
    url = urlWithoutBaseUrl;
    url = (0, utils_1.handleUrlOrigin)(url).urlWithoutOrigin;
    (0, utils_1.assert)(url.startsWith('/'));
    const urlNormalized = url;
    (0, utils_1.assert)(urlNormalized.startsWith('/'));
    return { urlNormalized, isPageContextRequest, hasBaseUrl };
}
function addComputedUrlProps(pageContext) {
    var _a, _b, _c;
    if ('urlNormalized' in pageContext) {
        (0, utils_1.assert)(((_a = Object.getOwnPropertyDescriptor(pageContext, 'urlNormalized')) === null || _a === void 0 ? void 0 : _a.get) === urlNormalizedGetter);
        (0, utils_1.assert)(((_b = Object.getOwnPropertyDescriptor(pageContext, 'urlPathname')) === null || _b === void 0 ? void 0 : _b.get) === urlPathnameGetter);
        (0, utils_1.assert)(((_c = Object.getOwnPropertyDescriptor(pageContext, 'urlParsed')) === null || _c === void 0 ? void 0 : _c.get) === urlParsedGetter);
    }
    else {
        Object.defineProperty(pageContext, 'urlNormalized', { get: urlNormalizedGetter });
        Object.defineProperty(pageContext, 'urlPathname', { get: urlPathnameGetter });
        Object.defineProperty(pageContext, 'urlParsed', { get: urlParsedGetter });
    }
}
exports.addComputedUrlProps = addComputedUrlProps;
function urlNormalizedGetter() {
    (0, utils_1.assert)((0, utils_1.hasProp)(this, 'url', 'string'));
    return analyzeUrl(this.url).urlNormalized;
}
function urlPathnameGetter() {
    return (0, utils_1.getUrlPathname)(this.urlNormalized);
}
function urlParsedGetter() {
    return (0, utils_1.getUrlParsed)(this.urlNormalized);
}
async function getGlobalContext() {
    const globalContext = {};
    const allPageFiles = await (0, getPageFiles_1.getAllPageFiles_serverSide)();
    (0, utils_1.objectAssign)(globalContext, {
        _allPageFiles: allPageFiles
    });
    const allPageIds = await (0, route_1.getAllPageIds)(allPageFiles);
    (0, utils_1.objectAssign)(globalContext, { _allPageIds: allPageIds });
    const { pageRoutes, onBeforeRouteHook } = await (0, route_1.loadPageRoutes)(globalContext);
    (0, utils_1.objectAssign)(globalContext, { _pageRoutes: pageRoutes, _onBeforeRouteHook: onBeforeRouteHook });
    return globalContext;
}
exports.getGlobalContext = getGlobalContext;
//# sourceMappingURL=renderPage.js.map