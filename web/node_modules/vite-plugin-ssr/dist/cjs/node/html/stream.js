"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pipeNodeStream = exports.pipeWebStream = exports.streamToString = exports.isStream = exports.addStringWrapperToStream = exports.streamPipeNodeToString = exports.streamPipeWebToString = exports.streamReadableWebToString = exports.streamReadableNodeToString = exports.isStreamReadableNode = exports.isStreamReadableWeb = exports.pipeToStreamWritableWeb = exports.pipeToStreamWritableNode = exports.getWebStream = exports.getNodeStream = void 0;
const stream_1 = require("stream");
const utils_1 = require("../../shared/utils");
function isStreamReadableWeb(thing) {
    return typeof ReadableStream !== 'undefined' && thing instanceof ReadableStream;
}
exports.isStreamReadableWeb = isStreamReadableWeb;
function isStreamReadableNode(thing) {
    return thing instanceof stream_1.Readable;
}
exports.isStreamReadableNode = isStreamReadableNode;
async function streamReadableNodeToString(readableNode) {
    // Copied from: https://stackoverflow.com/questions/10623798/how-do-i-read-the-contents-of-a-node-js-stream-into-a-string-variable/49428486#49428486
    const chunks = [];
    return new Promise((resolve, reject) => {
        readableNode.on('data', (chunk) => chunks.push(Buffer.from(chunk)));
        readableNode.on('error', (err) => reject(err));
        readableNode.on('end', () => resolve(Buffer.concat(chunks).toString('utf8')));
    });
}
exports.streamReadableNodeToString = streamReadableNodeToString;
async function streamReadableWebToString(readableWeb) {
    let str = '';
    const reader = readableWeb.getReader();
    while (true) {
        const { done, value } = await reader.read();
        if (done) {
            break;
        }
        str += value;
    }
    return str;
}
exports.streamReadableWebToString = streamReadableWebToString;
function stringToStreamReadableNode(str) {
    return stream_1.Readable.from(str);
}
function stringToStreamReadableWeb(str) {
    // `ReadableStream.from()` spec discussion: https://github.com/whatwg/streams/issues/1018
    const readableStream = new ReadableStream({
        start(controller) {
            controller.enqueue(str);
            controller.close();
        }
    });
    return readableStream;
}
function stringToStreamPipeNode(str) {
    return (writable) => {
        writable.write(str);
        writable.end();
    };
}
function stringToStreamPipeWeb(str) {
    return (writable) => {
        const writer = writable.getWriter();
        const encoder = new TextEncoder();
        writer.write(encoder.encode(str));
        writer.close();
    };
}
function streamPipeNodeToString(streamPipeNode) {
    let str = '';
    let resolve;
    const promise = new Promise((r) => (resolve = r));
    const writable = new stream_1.Writable({
        write(chunk, encoding, callback) {
            (0, utils_1.assert)(encoding === 'utf8');
            const s = chunk.toString();
            (0, utils_1.assert)(typeof s === 'string');
            str += s;
            callback();
        },
        final(callback) {
            resolve(str);
            callback();
        }
    });
    streamPipeNode(writable);
    return promise;
}
exports.streamPipeNodeToString = streamPipeNodeToString;
function streamPipeWebToString(streamPipeWeb) {
    let str = '';
    let resolve;
    const promise = new Promise((r) => (resolve = r));
    const writable = new WritableStream({
        write(chunk) {
            (0, utils_1.assert)(typeof chunk === 'string');
            str += chunk;
        },
        close() {
            resolve(str);
        }
    });
    streamPipeWeb(writable);
    return promise;
}
exports.streamPipeWebToString = streamPipeWebToString;
function getNodeStream(escapeResult) {
    if (typeof escapeResult === 'string') {
        return stringToStreamReadableNode(escapeResult);
    }
    if (isStreamReadableNode(escapeResult)) {
        return escapeResult;
    }
    return null;
}
exports.getNodeStream = getNodeStream;
function getWebStream(escapeResult) {
    if (typeof escapeResult === 'string') {
        return stringToStreamReadableWeb(escapeResult);
    }
    if (isStreamReadableWeb(escapeResult)) {
        return escapeResult;
    }
    return null;
}
exports.getWebStream = getWebStream;
function pipeToStreamWritableWeb(escapeResult, writable) {
    if (typeof escapeResult === 'string') {
        const streamPipeWeb = stringToStreamPipeWeb(escapeResult);
        streamPipeWeb(writable);
        return true;
    }
    const streamPipeWeb = getStreamPipeWeb(escapeResult);
    if (streamPipeWeb === null) {
        return false;
    }
    streamPipeWeb(writable);
    return true;
}
exports.pipeToStreamWritableWeb = pipeToStreamWritableWeb;
function pipeToStreamWritableNode(escapeResult, writable) {
    if (typeof escapeResult === 'string') {
        const streamPipeNode = stringToStreamPipeNode(escapeResult);
        streamPipeNode(writable);
        return true;
    }
    const streamPipeNode = getStreamPipeNode(escapeResult);
    if (streamPipeNode === null) {
        return false;
    }
    streamPipeNode(writable);
    return true;
}
exports.pipeToStreamWritableNode = pipeToStreamWritableNode;
f(1);
function f(a) {
    if (typeof a === 'number') {
        return 2;
    }
    return a;
}
function addStringWrapperToStream(stream, stringBegin, stringEnd) {
    if (isStreamPipeNode(stream)) {
        return pipeNodeStream((writable) => {
            writable.write(stringBegin);
            const writableProxy = new stream_1.Writable({
                write(chunk, _encoding, callback) {
                    writable.write(chunk);
                    callback();
                },
                final(callback) {
                    writable.write(stringEnd);
                    writable.end();
                    callback();
                }
            });
            const streamPipeNode = getStreamPipeNode(stream);
            streamPipeNode(writableProxy);
        });
    }
    if (isStreamPipeWeb(stream)) {
        return pipeWebStream((writable) => {
            const writer = writable.getWriter();
            writer.write(stringBegin);
            const writableProxy = new WritableStream({
                write(chunk) {
                    writer.write(chunk);
                },
                close() {
                    writer.write(stringEnd);
                    writer.close();
                }
            });
            const streamPipeWeb = getStreamPipeWeb(stream);
            streamPipeWeb(writableProxy);
        });
    }
    if (isStreamReadableWeb(stream)) {
        return new ReadableStream({
            async start(controller) {
                controller.enqueue(stringBegin);
                const readableWeb = stream;
                const reader = readableWeb.getReader();
                while (true) {
                    const { value, done } = await reader.read();
                    if (done) {
                        break;
                    }
                    controller.enqueue(value);
                }
                controller.enqueue(stringEnd);
                controller.close();
            }
        });
    }
    if (isStreamReadableNode(stream)) {
        const readableNodeProxy = new stream_1.Readable({ read() { } });
        readableNodeProxy.push(stringBegin);
        const readableNode = stream;
        readableNode.on('data', (chunk) => readableNodeProxy.push(chunk));
        readableNode.on('error', (err) => readableNodeProxy.destroy(err));
        readableNode.on('end', () => {
            readableNodeProxy.push(stringEnd);
            readableNodeProxy.push(null);
        });
        return readableNodeProxy;
    }
    (0, utils_1.assert)(false);
}
exports.addStringWrapperToStream = addStringWrapperToStream;
function isStream(something) {
    if (isStreamReadableWeb(something) ||
        isStreamReadableNode(something) ||
        isStreamPipeNode(something) ||
        isStreamPipeWeb(something)) {
        (0, utils_1.checkType)(something);
        return true;
    }
    return false;
}
exports.isStream = isStream;
const __streamPipeWeb = Symbol('__streamPipeWeb');
function pipeWebStream(pipe) {
    return { [__streamPipeWeb]: pipe };
}
exports.pipeWebStream = pipeWebStream;
function getStreamPipeWeb(thing) {
    if (isStreamPipeWeb(thing)) {
        return thing[__streamPipeWeb];
    }
    return null;
}
function isStreamPipeWeb(something) {
    return (0, utils_1.isObject)(something) && __streamPipeWeb in something;
}
const __streamPipeNode = Symbol('__streamPipeNode');
function pipeNodeStream(pipe) {
    return { [__streamPipeNode]: pipe };
}
exports.pipeNodeStream = pipeNodeStream;
function getStreamPipeNode(thing) {
    if (isStreamPipeNode(thing)) {
        return thing[__streamPipeNode];
    }
    return null;
}
function isStreamPipeNode(something) {
    return (0, utils_1.isObject)(something) && __streamPipeNode in something;
}
async function streamToString(escapeResult) {
    if (isStreamReadableWeb(escapeResult)) {
        return await streamReadableWebToString(escapeResult);
    }
    if (isStreamReadableNode(escapeResult)) {
        return await streamReadableNodeToString(escapeResult);
    }
    if (isStreamPipeNode(escapeResult)) {
        return streamPipeNodeToString(getStreamPipeNode(escapeResult));
    }
    if (isStreamPipeWeb(escapeResult)) {
        return streamPipeWebToString(getStreamPipeWeb(escapeResult));
    }
    (0, utils_1.checkType)(escapeResult);
    (0, utils_1.assert)(false);
}
exports.streamToString = streamToString;
//# sourceMappingURL=stream.js.map