import type { PageContextInjectAssets } from './injectAssets';
import { Stream, StreamTypePatch } from './stream';
export { escapeInject };
export { dangerouslySkipEscape };
export { isEscapeInject };
export { renderEscapeInject };
export { getHtmlString };
export type { EscapeResult };
declare type EscapeInject = TemplateWrapped | EscapedString | Stream;
declare type EscapeResult = string | Stream;
declare const __template: unique symbol;
declare type TemplateStrings = TemplateStringsArray;
declare type TemplateVariable = string | EscapedString | Stream | TemplateWrapped;
declare type TemplateWrapped = {
    [__template]: TemplateContent;
};
declare type TemplateContent = {
    templateStrings: TemplateStrings;
    templateVariables: TemplateVariable[];
};
declare function isEscapeInject(something: unknown): something is EscapeInject;
declare function renderEscapeInject(escapeInject: EscapeInject, pageContext: PageContextInjectAssets, renderFilePath: string): Promise<EscapeResult>;
declare function escapeInject(templateStrings: TemplateStrings, ...templateVariables: (TemplateVariable | StreamTypePatch)[]): TemplateWrapped;
declare const __escaped: unique symbol;
declare type EscapedString = {
    [__escaped]: string;
};
declare function dangerouslySkipEscape(alreadyEscapedString: string): EscapedString;
declare function getHtmlString(escapeResult: EscapeResult): Promise<string>;
//# sourceMappingURL=escapeInject.d.ts.map