import { MediaType } from './inferMediaType';
import { AllPageFiles } from '../../shared/getPageFiles';
export { injectAssets };
export { injectAssets_internal };
export type { PageContextInjectAssets };
export { getPageAssets };
export { PageAssets };
declare type PageAssets = PageAsset[];
declare type PageAsset = {
    src: string;
    assetType: 'script' | 'style' | 'preload';
    mediaType: null | NonNullable<MediaType>['mediaType'];
    preloadType: null | NonNullable<MediaType>['preloadType'];
};
declare function getPageAssets(pageContext: {
    _allPageFiles: AllPageFiles;
}, dependencies: string[], pageClientFilePath: string, isPreRendering: boolean): Promise<PageAsset[]>;
declare function injectAssets(htmlString: string, pageContext: Record<string, unknown>): Promise<string>;
declare type PageContextInjectAssets = {
    urlNormalized: string;
    _pageAssets: PageAssets;
    _pageId: string;
    _pageContextClient: Record<string, unknown>;
    _pageFilePath: string | null;
    _pageClientPath: string;
    _passToClient: string[];
};
declare function injectAssets_internal(htmlString: string, pageContext: PageContextInjectAssets): Promise<string>;
//# sourceMappingURL=injectAssets.d.ts.map