/// <reference types="node" />
import { Readable, Writable } from 'stream';
import { EscapeResult } from './escapeInject';
export { getNodeStream };
export { getWebStream };
export { pipeToStreamWritableNode };
export { pipeToStreamWritableWeb };
export { isStreamReadableWeb };
export { isStreamReadableNode };
export { streamReadableNodeToString };
export { streamReadableWebToString };
export { streamPipeWebToString };
export { streamPipeNodeToString };
export { addStringWrapperToStream };
export { isStream };
export { streamToString };
export type { Stream };
export type { StreamTypePatch };
export type { StreamReadableWeb };
export type { StreamReadableNode };
export type { StreamWritableWeb };
export type { StreamWritableNode };
export type { StreamPipeWeb };
export type { StreamPipeNode };
export { pipeWebStream };
export { pipeNodeStream };
declare type StreamReadableWeb = ReadableStream;
declare type StreamWritableWeb = WritableStream;
declare type StreamReadableNode = Readable;
declare type StreamWritableNode = Writable;
declare type StreamPipeWeb = (writable: StreamWritableWeb) => void;
declare type StreamPipeNode = (writable: StreamWritableNode) => void;
declare type Stream = StreamReadableWeb | StreamReadableNode | StreamPipeWebWrapped | StreamPipeNodeWrapped;
declare type StreamTypePatch = NodeJS.ReadableStream;
declare function isStreamReadableWeb(thing: unknown): thing is StreamReadableWeb;
declare function isStreamReadableNode(thing: unknown): thing is StreamReadableNode;
declare function streamReadableNodeToString(readableNode: Readable): Promise<string>;
declare function streamReadableWebToString(readableWeb: ReadableStream): Promise<string>;
declare function streamPipeNodeToString(streamPipeNode: StreamPipeNode): Promise<string>;
declare function streamPipeWebToString(streamPipeWeb: StreamPipeWeb): Promise<string>;
declare function getNodeStream(escapeResult: EscapeResult): null | StreamReadableNode;
declare function getWebStream(escapeResult: EscapeResult): null | StreamReadableWeb;
declare function pipeToStreamWritableWeb(escapeResult: EscapeResult, writable: StreamWritableWeb): boolean;
declare function pipeToStreamWritableNode(escapeResult: EscapeResult, writable: StreamWritableNode): boolean;
declare function addStringWrapperToStream<T extends Stream>(stream: T, stringBegin: string, stringEnd: string): T;
declare function isStream(something: unknown): something is Stream;
declare const __streamPipeWeb: unique symbol;
declare type StreamPipeWebWrapped = {
    [__streamPipeWeb]: StreamPipeWeb;
};
declare function pipeWebStream(pipe: StreamPipeWeb): StreamPipeWebWrapped;
declare const __streamPipeNode: unique symbol;
declare type StreamPipeNodeWrapped = {
    [__streamPipeNode]: StreamPipeNode;
};
declare function pipeNodeStream(pipe: StreamPipeNode): StreamPipeNodeWrapped;
declare function streamToString(escapeResult: Stream): Promise<string>;
//# sourceMappingURL=stream.d.ts.map