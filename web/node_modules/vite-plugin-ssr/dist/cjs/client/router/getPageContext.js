"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPageContext = void 0;
const navigationState_1 = require("../navigationState");
const utils_1 = require("../../shared/utils");
const json_s_1 = require("@brillout/json-s");
const getPageContextSerializedInHtml_1 = require("../getPageContextSerializedInHtml");
async function getPageContext(url, useOriginalDataWhenPossible = true) {
    if (navigationState_1.navigationState.isOriginalUrl(url) && useOriginalDataWhenPossible) {
        const pageContext = (0, getPageContextSerializedInHtml_1.getPageContextSerializedInHtml)();
        return pageContext;
    }
    else {
        const pageContext = await retrievePageContext(url);
        return pageContext;
    }
}
exports.getPageContext = getPageContext;
async function retrievePageContext(url) {
    const response = await fetch((0, utils_1.getFileUrl)(url, '.pageContext.json', true));
    // Static hosts will return a 404
    if (response.status === 404) {
        fallbackToServerSideRouting();
    }
    const responseText = await response.text();
    const responseObject = (0, json_s_1.parse)(responseText);
    if ('pageContext404PageDoesNotExist' in responseObject) {
        fallbackToServerSideRouting();
    }
    (0, utils_1.assertUsage)(!('userError' in responseObject), `An error occurred on the server. Check your server logs.`);
    (0, utils_1.assert)((0, utils_1.hasProp)(responseObject, 'pageContext'));
    const { pageContext } = responseObject;
    (0, utils_1.assert)((0, utils_1.isPlainObject)(pageContext));
    (0, utils_1.assert)((0, utils_1.hasProp)(pageContext, '_pageId', 'string'));
    return pageContext;
    function fallbackToServerSideRouting() {
        window.location.pathname = url;
    }
}
//# sourceMappingURL=getPageContext.js.map