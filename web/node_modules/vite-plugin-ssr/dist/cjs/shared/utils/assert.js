"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertWarning = exports.assertUsage = exports.assert = void 0;
const libassert_1 = require("@brillout/libassert");
const projectInfo_1 = require("./projectInfo");
const npmPackage = `${projectInfo_1.projectInfo.npmPackageName}@${projectInfo_1.projectInfo.version}`;
const internalErrorPrefix = `[${npmPackage}][Internal Failure]`;
const usageErrorPrefix = `[${npmPackage}][Wrong Usage]`;
const warningPrefix = `[${npmPackage}][Warning]`;
const numberOfStackTraceLinesToRemove = 2;
function assert(condition, debugInfo) {
    if (condition) {
        return;
    }
    const debugStr = !debugInfo
        ? ''
        : ` Debug info (this is for the \`${projectInfo_1.projectInfo.name}\` maintainers; you can ignore this): \`${JSON.stringify(debugInfo)}\`.`;
    const internalError = (0, libassert_1.newError)(`${internalErrorPrefix} You stumbled upon a bug in \`${projectInfo_1.projectInfo.name}\`'s source code (an internal \`assert()\` failed). This should definitely not be happening, and you should create a new GitHub issue at ${projectInfo_1.projectInfo.githubRepository}/issues/new that includes this error stack (the error stack is usually enough to debug internal errors). Or reach out on Discord. A fix will be written promptly.${debugStr}`, numberOfStackTraceLinesToRemove);
    throw internalError;
}
exports.assert = assert;
function assertUsage(condition, errorMessage) {
    if (condition) {
        return;
    }
    const whiteSpace = errorMessage.startsWith('[') ? '' : ' ';
    const usageError = (0, libassert_1.newError)(`${usageErrorPrefix}${whiteSpace}${errorMessage}`, numberOfStackTraceLinesToRemove);
    throw usageError;
}
exports.assertUsage = assertUsage;
function assertWarning(condition, errorMessage) {
    if (condition) {
        return;
    }
    console.warn(`${warningPrefix} ${errorMessage}`);
}
exports.assertWarning = assertWarning;
//# sourceMappingURL=assert.js.map